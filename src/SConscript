import os.path
from SConfig import *

libSources = Glob('*.cpp')
libSources.extend(Glob('crypto/*.cpp'))

Import('configuration')
Import('environment')
Import('buildWithRsa')
Import('opensslLibPath')

def sslLibrary():
    if environment['PLATFORM'] == 'win32':
        return "%seay32%s" % (environment['LIBPREFIX'], environment['SHLIBSUFFIX'])
    else:
        return "%scrypto%s" % (environment['LIBPREFIX'], environment['SHLIBSUFFIX'])
        
def compileDebug():
    environment.Append( CCFLAGS = [ '-g', '-O0'] )
    commonBuild()

def compileRelease():
    environment.Append( CCFLAGS = ['-O2'] )
    commonBuild()

def compileTest():
    commonBuild()

def commonBuild():
    oauthLib = environment.StaticLibrary(LIB_TARGET, libSources)
    installDirPath = '#' + os.path.join(OUTPUT_DIR, configuration)
    environment.Install(installDirPath, oauthLib)

if buildWithRsa:
    print 'Building library with openssl and RSA-SHA1 signature'
    libSources.extend(Glob('utility/*.cpp'))
    libSources.extend(Glob('crypto/rsa/*.cpp'))
    libraryPath = os.path.join(opensslLibPath, sslLibrary())
    print libraryPath
    if not os.path.isfile(libraryPath):
        print 'OpenSSL not found in ' + opensslLibPath
        print 'Specify path to OpenSSL lib folder with --openssl-path'
        Exit(1)
    libSources.extend([libraryPath])
    
else:
    # Do not build RsaSignature.cpp
    print 'Building library without RSA-SHA1 signature method'
    libSources.extend([f for f in Glob('utility/*.cpp')
        if os.path.join('utility', 'RsaSignature.cpp') not in f.path])

if configuration == DEBUG_CONFIG:
    compileDebug()
elif configuration == RELEASE_CONFIG:
    compileRelease()
else:
    print 'Unknown configuration'
