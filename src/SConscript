import os.path
from SConfig import *

libSources = [source for source in Glob('oauth/*.cpp') if not source.path.endswith('DefaultSendRequest.cpp')]
libSources.extend(Glob('crypto/*.cpp'))
libSources.extend(Glob('utility/*.cpp'))

Import('configuration')
Import('environment')
Import('buildWithRsa')
Import('buildWithCurl')
Import('opensslLibPath')

additionalCCFLAGS = []

def compileDebug():
    additionalCCFLAGS.extend(['-g', '-O0']) 
    commonBuild()

def compileRelease():
    additionalCCFLAGS.extend(['-O2'])
    commonBuild()

def compileTest():
    commonBuild()

def commonBuild():
    environment.Append(CCFLAGS = additionalCCFLAGS)
    if buildWithCurl :
        environment.Append(CPPPATH = ['cURLpp/include/'], CPPDEFINES = ['CURLPP_STATICLIB', 'USE_CURL'])
        libSources.extend(
            [environment.Object(source , CCFLAGS = ['-std=c++0x'] + additionalCCFLAGS)
            for source in Glob('cURLpp/src/*/*.c*') + Glob('cURLpp/src/*/*/*.c*') + ['DefaultSendRequest.cpp']])
    oauthLib = environment.StaticLibrary(LIB_TARGET, libSources)
    installDirPath = '#' + os.path.join(OUTPUT_DIR, configuration)
    environment.Install(installDirPath, oauthLib)

if buildWithRsa:
    environment.Append(CPPDEFINES = ['USE_OPENSSL'])
    libSources.extend([f for f in Glob('crypto/rsa/*.cpp')
    if os.path.join('crypto', 'rsa', 'RsaSignatureWrapper.cpp') not in f.path])
    libSources.extend(environment.Object(os.path.join('crypto', 'rsa',
    'RsaSignatureWrapper.cpp'), CCFLAGS='-fpermissive'))
else:
    print 'Building library without RSA-SHA1 signature method'

if configuration == DEBUG_CONFIG:
    compileDebug()
elif configuration == RELEASE_CONFIG:
    compileRelease()
else:
    print 'Unknown configuration'
